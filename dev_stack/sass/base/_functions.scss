// SASSY FUNCTIONS
// ---------------------------------------------------------------------------

@function calculateRem($px_size, $px_base) {
	$remSize: ( $px_size / $px_base );
	@return unquote("#{$remSize}rem");
}

// returns a value scaled modularly UP
@function mscale($input, $times, $down: false) {
	$total: $input;
	@for $i from 1 through $times {
		@if $down {
			$total: $total / $mscale;
		} @else {
			$total: $total * $mscale;
		}
	}
	@return $total;
}

// calculates target REMs given their context
@function rem($target, $context: $font_base_px) {
	@return ($target / $context) * 1rem;
}
// calculates target PXs given their context
@function pixels($target, $context: $font_base_px) {
	$unitless: strip-unit($target);
	$output: ($unitless * $context) * 1px;
	@return($output);
}

// strips units from a given number
@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}
	@return $number;
}

@function get-vw($size, $vw-context){
	@return $size / $vw-context * 1vw;
	@return $size;
}

// color contrast
@function color-contrast($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);
	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
	@if ($yiq >= $color-contrasted-threshold) {
		@return $color-contrast-text-dark;
	} @else {
		@return $color-contrast-text-light;
	}
}

// Maps
@function map-get-next($map, $key, $fallback: false, $return: value) {
	// Check if map is valid
	@if type-of($map) == map {
		// Check if key exists in map
		@if map-has-key($map, $key) {
			// Init index counter variable
			$i: 0;
			// Init key index
			$key-index: false;
			// Traverse map for key
			@each $map-key, $map-value in $map {
				// Update index
				$i: $i + 1;
				// If map key found, set key index
				@if $map-key == $key {
					$key-index: $i;
				}
				// If next index return next value or key based on $return
				@if $i == $key-index + 1 {
					@if $return == key {
						@return $map-key;
					} @else {
						@return $map-value;
					}
				}
				// If last entry return false
				@if $i == length($map) {
					@return $fallback;
				}
			}
			@warn 'No next map item for key #{$key}';
			@return $fallback;
		}
		@warn 'No valid key #{$key} in map';
		@return $fallback;
	}
	@warn 'No valid map';
	@return $fallback;
}

// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round($number, $digits: 0, $mode: round) {
	$n: 1;
	// $number must be a number
	@if type-of($number) != number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}
	// $digits must be a unitless number
	@if type-of($digits) != number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	} @else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}
	@for $i from 1 through $digits {
		$n: $n * 10;
	}
	@if $mode == round {
		@return round($number * $n) / $n;
	} @else if $mode == ceil {
		@return ceil($number * $n) / $n;
	} @else if $mode == floor {
		@return floor($number * $n) / $n;
	} @else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil($number, $digits: 0) {
	@return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
	@return decimal-round($number, $digits, floor);
}